import pyomo.environ as pyo
import numpy as np
from mpisppy.opt.lshaped import LShapedMethod
import mpisppy.utils.sputils as sputils

# Newsvendor problem parameters
purchase_cost = 2.0  # Cost to purchase one unit
selling_price = 5.0  # Price to sell one unit
max_order = 100      # Maximum order quantity

# Define scenario generator
def scenario_creator(scenario_name, num_scens):
    model = pyo.ConcreteModel()
    
    # Extract scenario number from name
    i = int(scenario_name)
    
    # Different demand scenarios
    if i == 0:
        demand = 20  # Low demand
    elif i == 1:
        demand = 50  # Medium demand
    else:
        demand = 80  # High demand
        
    # First stage variable: how many units to order
    model.order = pyo.Var(bounds=(0, max_order), domain=pyo.NonNegativeReals)
    
    # Second stage variable: how many units to sell
    model.sales = pyo.Var(bounds=(0, max_order), domain=pyo.NonNegativeReals)
    
    # Objective: maximize profit
    model.profit = pyo.Objective(
        expr=selling_price*model.sales - purchase_cost*model.order,
        sense=pyo.maximize
    )
    
    # Constraint: can't sell more than we order
    model.limit_sales = pyo.Constraint(
        expr=model.sales <= model.order
    )
    
    # Constraint: can't sell more than demand
    model.limit_demand = pyo.Constraint(
        expr=model.sales <= demand
    )
    
    # Indicate first-stage cost and variables to mpi-sppy
    model.FirstStageCost = pyo.Expression(expr=-purchase_cost*model.order)
    sputils.attach_root_node(model, model.FirstStageCost, [model.order])
    
    return model

def scenario_denouement(rank, scenario_name, scenario):
    # Optional function to handle results, can be empty
    pass

# Main function to set up and solve with the L-shaped method
def main():
    num_scenarios = 3
    scenario_names = [str(i) for i in range(num_scenarios)]
    
    options = {
        "root_solver": "gurobi_persistent",  # Use appropriate solver (e.g. 'glpk' if you don't have gurobi)
        "sp_solver": "gurobi_persistent",
        "sp_solver_options": {"threads": 1},
        "root_solver_options": {"threads": 1},
        "verbose": True,
        "max_iter": 100,
        "tol": 1e-5
    }
    
    ls = LShapedMethod(
        options,
        scenario_names,
        scenario_creator,
        scenario_denouement,
        scenario_creator_kwargs={"num_scens": num_scenarios}
    )
    
    results = ls.lshaped_algorithm()
    
    # Print results
    print("\nResults:")
    print(f"Optimal order quantity: {ls.root.order.value:.2f}")
    print(f"Objective value (profit): {ls.root.obj():.2f}")
    
    # Print sales for each scenario
    for sname, s in ls.local_scenarios.items():
        print(f"Scenario {sname}: Sales = {s.sales.value:.2f}, Demand met = {s.sales.value / int(sname) * 100:.2f}%")

if __name__ == "__main__":
    main()